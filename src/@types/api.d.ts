export type APIKey = "electron";
export type API = {
  platform: number;
  isMac: boolean;
  isWin: boolean;
  isLinux: boolean;
  focusHomePage: () => void;
  unReadChange: (num: number) => void;
  miniSizeApp: () => void;
  setLoginMain: () => void;
  maxSizeApp: () => void;
  closeApp: () => void;
  getAppCloseAction: () => boolean;
  setAppCloseAction: (close: boolean) => void;
  addIpcRendererListener: (event: string, listener: (...args: any[]) => void, flag: string) => void;
  removeIpcRendererListener: (flag: string) => void;
  screenshot: (isHidden?: boolean) => void;
  getCachePath: () => string;
  OpenShowDialog: (filters: any[]) => string[] | undefined;
  file2url: (path: string) => string;
  save2path: (path: string, base64: string) => Promise<unknown>;
  fileExists: (path: string) => boolean;
  openFile: (path: string) => void;
  showInFinder: (path: string) => void;
  download: (path: string) => void;
  openExternal: (url: string) => void;
  checkForUpdates: () => void;
  updateDownload: () => void;
  quitAndInstall: () => void;
  setLoginInit: () => void;
  getVersion: () => string;
  copy2Text: (text: string) => void;
  delFile: (path: string) => void;
  quitApp: () => void;
  inputContextMenu: () => void;
  getStoreKey: (key: string) => string;
  removeStoreKey: (key: string) => string;
  setStoreKey: (key: string, value: string) => void;
  getScreenSource: () => Promise<Electron.DesktopCapturerSource[]>;
  accountLogin: () => void;
  accountLoginClose: () => void;
};
